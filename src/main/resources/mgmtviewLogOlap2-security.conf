streamingJob {
  app {
    "name": "MgmtviewLogOlap"
    params { }
  }

  streaming {
    windowDuration: 30s
    slideDuration: 5s
    batchDuration: 5s
    checkpointDir: /tmp/checkpoint/
    shutdownMarker: /tmp/stopMarker
  }

  security {
    userPrinciple: "P9USER@PL2_GD_NEW.COM"
    userKeytabPath: "/tmp/P9USER/user.keytab"
    krb5ConfPath: "/tmp/P9USER/krb5.conf"
  }

  spark {
    params {
      "spark.master": "local[*]"
      "spark.app.name": "MgmtviewLogOlap"
      "spark.streaming.stopGracefullyOnShutdown": true
      "spark.streaming.receiver.writeAheadLog.enable": false
      "spark.streaming.driver.writeAheadLog.allowBatching": false
    }
  }
  input = [
    {
      class: "io.github.shen.input.KafkaInputBeam"
      config: {
        topics = [
          "input"
        ]
        params {
          // kafka brokers
          "bootstrap.servers": "localhost:9092"
          // kafka deserializer
          "key.deserializer": "org.apache.kafka.common.serialization.StringDeserializer"
          // kafka deserializer
          "value.deserializer": "org.apache.kafka.common.serialization.StringDeserializer"
          // kafka group id
          "group.id": "example"
          "enable.auto.commit": false
          // start from the latest messages (at most once)
          "auto.offset.reset": "latest"
        }
      }
    }
    {
      class: "io.github.shen.input.HdfsInputBeam"
      config: {
        params {
          "path": "/home/shen/dev/spark-streaming-util/src/main/resources/orgMapFile.csv"
          "format": "text"
        }
      }
    }
  ]
  output = [
    {
      class: "io.github.shen.output.KafkaOutputBeam"
      config: {
        topics = [
          "output"
        ]
        params {
          // kafka bootstrap
          "bootstrap.servers": "localhost:9092"
          // kafka key serializer
          "key.serializer": "org.apache.kafka.common.serialization.StringSerializer"
          // kafka key serializer
          "value.serializer": "org.apache.kafka.common.serialization.StringSerializer"
          // ack from all in-sync replicas
          "acks": "all"
        }
      }
    }
  ]
}
